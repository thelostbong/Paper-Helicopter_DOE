library(tidyverse)
library(knitr)
install.packages("kableExtra")
library(kableExtra)
library(ggplot2)
library(plotly)
library(corrplot)
install.packages("car")
library(tidyverse)
library(knitr)
library(kableExtra)
library(ggplot2)
library(plotly)
library(corrplot)
library(car)
library(broom)
library(GGally)
# Set theme for plots
theme_set(theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12)))
helicopter_data <- data.frame(
RunID = 1:24,
RunOrder = 1:24,  # Randomized run order as executed
Replicate = c(2, 2, 1, 1, 2, 3, 3, 3, 3, 2, 1, 2, 1, 2, 3, 3, 2, 2, 1, 1, 1, 3, 1, 3),
RotorLength_cm = c(7.5, 8.5, 8.5, 7.5, 8.5, 8.5, 7.5, 7.5, 8.5, 7.5, 7.5, 7.5, 7.5, 8.5, 8.5, 7.5, 8.5, 7.5, 8.5, 7.5, 8.5, 8.5, 8.5, 7.5),
RotorWidth_cm = c(3.5, 5, 5, 3.5, 3.5, 5, 3.5, 5, 3.5, 5, 5, 5, 3.5, 3.5, 3.5, 3.5, 5, 3.5, 3.5, 5, 3.5, 5, 5, 5),
PaperClip = c(2, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0),
Time_s = c(3.03, 3.42, 3.75, 3.4, 4.12, 3.07, 3.31, 2.32, 3.4, 2.62, 2.98, 2.45, 3.03, 3.25, 4.18, 2.96, 3.07, 3.51, 3.45, 2.4, 4.14, 3.66, 3.19, 2.52)
)
# Create coded factors for DOE analysis
helicopter_coded <- helicopter_data %>%
mutate(
# Convert to coded factors (-1, +1)
A_Length = ifelse(RotorLength_cm == 7.5, -1, 1),
B_Width = ifelse(RotorWidth_cm == 3.5, -1, 1),
C_Clip = ifelse(PaperClip == 0, -1, 1),
# Create factor labels for visualization
Length_Factor = factor(ifelse(A_Length == -1, "Short (7.5cm)", "Long (8.5cm)")),
Width_Factor = factor(ifelse(B_Width == -1, "Narrow (3.5cm)", "Wide (5.0cm)")),
Clip_Factor = factor(ifelse(C_Clip == -1, "No Clip (0)", "With Clip (2)")),
# Create treatment combination labels
Treatment = paste0(
ifelse(A_Length == 1, "a", ""),
ifelse(B_Width == 1, "b", ""),
ifelse(C_Clip == 1, "c", "")
),
Treatment = ifelse(Treatment == "", "(1)", Treatment)
)
# Display first few rows
helicopter_coded %>%
select(RunID, RotorLength_cm, RotorWidth_cm, PaperClip, Time_s, A_Length, B_Width, C_Clip, Treatment) %>%
head(10) %>%
kable(caption = "First 10 rows of experimental data with coded factors") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
design_summary <- helicopter_coded %>%
group_by(A_Length, B_Width, C_Clip, Treatment) %>%
summarise(
n_runs = n(),
mean_time = round(mean(Time_s), 3),
sd_time = round(sd(Time_s), 3),
.groups = 'drop'
) %>%
arrange(A_Length, B_Width, C_Clip)
design_summary %>%
kable(
caption = "2³ Factorial Design: Treatment Combinations and Summary Statistics",
col.names = c("Length (A)", "Width (B)", "Clip (C)", "Treatment", "Replicates", "Mean Time (s)", "SD Time (s)")
) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
cat("\n**Design Characteristics:**\n")
cat("- Factors: 3 (Length, Width, Paper Clips)\n")
cat("- Levels per factor: 2\n")
cat("- Design: 2³ Full Factorial\n")
cat("- Total treatment combinations: 8\n")
cat("- Total runs:", nrow(helicopter_coded), "\n")
cat("- Replication: 3 replicates per treatment combination\n")
cat("- Randomization: Runs executed in randomized order\n")
cat("- Response: Flight time from release to ground contact (seconds)\n")
overall_summary <- helicopter_coded %>%
summarise(
n = n(),
mean_time = round(mean(Time_s), 3),
median_time = round(median(Time_s), 3),
sd_time = round(sd(Time_s), 3),
min_time = round(min(Time_s), 3),
max_time = round(max(Time_s), 3),
range_time = round(max(Time_s) - min(Time_s), 3)
)
overall_summary %>%
kable(caption = "Overall Summary Statistics for Flight Time") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
# Factor-level summaries
factor_summaries <- list(
Length = helicopter_coded %>%
group_by(Length_Factor) %>%
summarise(n = n(), mean_time = round(mean(Time_s), 3), sd_time = round(sd(Time_s), 3)),
Width = helicopter_coded %>%
group_by(Width_Factor) %>%
summarise(n = n(), mean_time = round(mean(Time_s), 3), sd_time = round(sd(Time_s), 3)),
Clip = helicopter_coded %>%
group_by(Clip_Factor) %>%
summarise(n = n(), mean_time = round(mean(Time_s), 3), sd_time = round(sd(Time_s), 3))
)
# Display factor summaries
cat("### Factor Level Summaries\n\n")
for(factor_name in names(factor_summaries)) {
cat("**", factor_name, "Effect:**\n")
print(kable(factor_summaries[[factor_name]],
caption = paste(factor_name, "levels summary")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")))
cat("\n")
}
###Data Visualization
p1 <- helicopter_coded %>%
ggplot(aes(x = Length_Factor, y = Time_s)) +
geom_boxplot(aes(fill = Length_Factor), alpha = 0.7) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(title = "Effect of Rotor Length", x = "Rotor Length", y = "Flight Time (s)") +
theme(legend.position = "none")
p2 <- helicopter_coded %>%
ggplot(aes(x = Width_Factor, y = Time_s)) +
geom_boxplot(aes(fill = Width_Factor), alpha = 0.7) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(title = "Effect of Rotor Width", x = "Rotor Width", y = "Flight Time (s)") +
theme(legend.position = "none")
p3 <- helicopter_coded %>%
ggplot(aes(x = Clip_Factor, y = Time_s)) +
geom_boxplot(aes(fill = Clip_Factor), alpha = 0.7) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(title = "Effect of Paper Clip", x = "Paper Clip", y = "Flight Time (s)") +
theme(legend.position = "none")
# Combine plots
library(patchwork)
p1 + p2 + p3
# Interaction plots
int1 <- helicopter_coded %>%
group_by(Length_Factor, Width_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Length_Factor, y = mean_time, color = Width_Factor, group = Width_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Length × Width Interaction",
x = "Rotor Length", y = "Mean Flight Time (s)",
color = "Rotor Width") +
theme(legend.position = "bottom")
int2 <- helicopter_coded %>%
group_by(Length_Factor, Clip_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Length_Factor, y = mean_time, color = Clip_Factor, group = Clip_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Length × Clip Interaction",
x = "Rotor Length", y = "Mean Flight Time (s)",
color = "Paper Clip") +
theme(legend.position = "bottom")
int3 <- helicopter_coded %>%
group_by(Width_Factor, Clip_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Width_Factor, y = mean_time, color = Clip_Factor, group = Clip_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Width × Clip Interaction",
x = "Rotor Width", y = "Mean Flight Time (s)",
color = "Paper Clip") +
theme(legend.position = "bottom")
int1 + int2 + int3
library(patchwork)
# Interaction plots
int1 <- helicopter_coded %>%
group_by(Length_Factor, Width_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Length_Factor, y = mean_time, color = Width_Factor, group = Width_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Length × Width Interaction",
x = "Rotor Length", y = "Mean Flight Time (s)",
color = "Rotor Width") +
theme(legend.position = "bottom")
int2 <- helicopter_coded %>%
group_by(Length_Factor, Clip_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Length_Factor, y = mean_time, color = Clip_Factor, group = Clip_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Length × Clip Interaction",
x = "Rotor Length", y = "Mean Flight Time (s)",
color = "Paper Clip") +
theme(legend.position = "bottom")
int3 <- helicopter_coded %>%
group_by(Width_Factor, Clip_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Width_Factor, y = mean_time, color = Clip_Factor, group = Clip_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Width × Clip Interaction",
x = "Rotor Width", y = "Mean Flight Time (s)",
color = "Paper Clip") +
theme(legend.position = "bottom")
int1 + int2 + int3
# Interaction plots
library(patchwork)
int1 <- helicopter_coded %>%
group_by(Length_Factor, Width_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Length_Factor, y = mean_time, color = Width_Factor, group = Width_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Length × Width Interaction",
x = "Rotor Length", y = "Mean Flight Time (s)",
color = "Rotor Width") +
theme(legend.position = "bottom")
int2 <- helicopter_coded %>%
group_by(Length_Factor, Clip_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Length_Factor, y = mean_time, color = Clip_Factor, group = Clip_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Length × Clip Interaction",
x = "Rotor Length", y = "Mean Flight Time (s)",
color = "Paper Clip") +
theme(legend.position = "bottom")
int3 <- helicopter_coded %>%
group_by(Width_Factor, Clip_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Width_Factor, y = mean_time, color = Clip_Factor, group = Clip_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Width × Clip Interaction",
x = "Rotor Width", y = "Mean Flight Time (s)",
color = "Paper Clip") +
theme(legend.position = "bottom")
int1 + int2 + int3
# Interaction plots
library(patchwork)
int1 <- helicopter_coded %>%
group_by(Length_Factor, Width_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Length_Factor, y = mean_time, color = Width_Factor, group = Width_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Length × Width Interaction",
x = "Rotor Length", y = "Mean Flight Time (s)",
color = "Rotor Width") +
theme(legend.position = "bottom")
int2 <- helicopter_coded %>%
group_by(Length_Factor, Clip_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Length_Factor, y = mean_time, color = Clip_Factor, group = Clip_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Length × Clip Interaction",
x = "Rotor Length", y = "Mean Flight Time (s)",
color = "Paper Clip") +
theme(legend.position = "bottom")
int3 <- helicopter_coded %>%
group_by(Width_Factor, Clip_Factor) %>%
summarise(mean_time = mean(Time_s), .groups = 'drop') %>%
ggplot(aes(x = Width_Factor, y = mean_time, color = Clip_Factor, group = Clip_Factor)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Width × Clip Interaction",
x = "Rotor Width", y = "Mean Flight Time (s)",
color = "Paper Clip") +
theme(legend.position = "bottom")
(int1| int2) / int3
# Calculate effects using the standard DOE approach (Yates algorithm)
# Get average response for each treatment combination
treatment_means <- helicopter_coded %>%
group_by(A_Length, B_Width, C_Clip, Treatment) %>%
summarise(mean_response = mean(Time_s), .groups = 'drop') %>%
arrange(A_Length, B_Width, C_Clip)
# Extract the 8 treatment combination means in standard order
y <- treatment_means$mean_response
names(y) <- treatment_means$Treatment
# Calculate effects using contrast coefficients (standard DOE method)
n_reps <- 3  # number of replicates per treatment combination
# Main effects (contrast: high level - low level / 4)
A_effect <- (sum(y[c("a", "ab", "ac", "abc")]) - sum(y[c("(1)", "b", "c", "bc")])) / 4
B_effect <- (sum(y[c("b", "ab", "bc", "abc")]) - sum(y[c("(1)", "a", "c", "ac")])) / 4
C_effect <- (sum(y[c("c", "ac", "bc", "abc")]) - sum(y[c("(1)", "a", "b", "ab")])) / 4
# Two-factor interactions
AB_effect <- (sum(y[c("ab", "abc")]) + sum(y[c("(1)", "c")]) - sum(y[c("a", "ac")]) - sum(y[c("b", "bc")])) / 4
AC_effect <- (sum(y[c("ac", "abc")]) + sum(y[c("(1)", "b")]) - sum(y[c("a", "ab")]) - sum(y[c("c", "bc")])) / 4
BC_effect <- (sum(y[c("bc", "abc")]) + sum(y[c("(1)", "a")]) - sum(y[c("b", "ab")]) - sum(y[c("c", "ac")])) / 4
# Three-factor interaction
ABC_effect <- (sum(y[c("abc", "(1)", "ab", "c")]) - sum(y[c("a", "b", "ac", "bc")])) / 4
# Calculate standard errors for effects (assuming equal variance)
mse <- sum((helicopter_coded$Time_s - ave(helicopter_coded$Time_s, helicopter_coded$Treatment))^2) / (24 - 8)
se_effect <- sqrt(mse / (4 * n_reps))  # Standard error for effects
# Create effects summary with statistical testing
effects_summary <- tibble(
Effect = c("A (Length)", "B (Width)", "C (Clip)", "AB", "AC", "BC", "ABC"),
Estimate = round(c(A_effect, B_effect, C_effect, AB_effect, AC_effect, BC_effect, ABC_effect), 4),
SE = round(rep(se_effect, 7), 4),
t_stat = round(c(A_effect, B_effect, C_effect, AB_effect, AC_effect, BC_effect, ABC_effect) / se_effect, 3),
Abs_Effect = round(abs(c(A_effect, B_effect, C_effect, AB_effect, AC_effect, BC_effect, ABC_effect)), 4)
) %>%
arrange(desc(Abs_Effect))
effects_summary %>%
kable(caption = "Factorial Effects Summary (Ranked by Absolute Magnitude)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
# Display treatment combination means in standard order
treatment_table <- treatment_means %>%
select(Treatment, A_Length, B_Width, C_Clip, mean_response) %>%
mutate(
Length_Level = ifelse(A_Length == -1, "Short (7.5)", "Long (8.5)"),
Width_Level = ifelse(B_Width == -1, "Narrow (3.5)", "Wide (5.0)"),
Clip_Level = ifelse(C_Clip == -1, "No Clip (0)", "With Clip (2)")
) %>%
select(Treatment, Length_Level, Width_Level, Clip_Level, mean_response) %>%
arrange(mean_response)
treatment_table %>%
kable(caption = "Treatment Combination Means (Ordered by Flight Time)",
col.names = c("Treatment", "Length", "Width", "Clips", "Mean Time (s)")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
# Fit full factorial model
model_full <- lm(Time_s ~ A_Length * B_Width * C_Clip, data = helicopter_coded)
# ANOVA table
anova_table <- anova(model_full)
print(anova_table)
# Model summary
model_summary <- summary(model_full)
print(model_summary)
# Create a tidy ANOVA table
anova_tidy <- tidy(anova_table) %>%
mutate(
term = case_when(
term == "A_Length" ~ "A: Rotor Length",
term == "B_Width" ~ "B: Rotor Width",
term == "C_Clip" ~ "C: Paper Clip",
term == "A_Length:B_Width" ~ "AB: Length × Width",
term == "A_Length:C_Clip" ~ "AC: Length × Clip",
term == "B_Width:C_Clip" ~ "BC: Width × Clip",
term == "A_Length:B_Width:C_Clip" ~ "ABC: Length × Width × Clip",
term == "Residuals" ~ "Error",
TRUE ~ term
),
across(where(is.numeric), round, 4)
) %>%
select(Source = term, DF = df, SS = sumsq, MS = meansq, `F-value` = statistic, `p-value` = p.value)
anova_tidy %>%
kable(caption = "ANOVA Table for 2³ Factorial Design") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
# Create diagnostic plots
par(mfrow = c(2, 2))
plot(model_full)
par(mfrow = c(1, 1))
# Additional diagnostic tests
cat("**Shapiro-Wilk Test for Normality:**\n")
shapiro_test <- shapiro.test(residuals(model_full))
print(shapiro_test)
cat("\n**Levene's Test for Homogeneity of Variance:**\n")
levene_test <- leveneTest(Time_s ~ interaction(Length_Factor, Width_Factor, Clip_Factor),
data = helicopter_coded)
print(levene_test)
# Residual analysis
residual_data <- helicopter_coded %>%
mutate(
fitted = fitted(model_full),
residuals = residuals(model_full),
std_residuals = rstandard(model_full)
)
# Plot residuals vs fitted
res_plot <- residual_data %>%
ggplot(aes(x = fitted, y = residuals)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "red") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuals vs Fitted Values",
x = "Fitted Values", y = "Residuals")
# Normal Q-Q plot
qq_plot <- residual_data %>%
ggplot(aes(sample = std_residuals)) +
stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot",
x = "Theoretical Quantiles", y = "Sample Quantiles")
res_plot + qq_plot
# Extract significant effects (p < 0.05)
significant_effects <- anova_tidy %>%
filter(!is.na(`p-value`), `p-value` < 0.05) %>%
arrange(`p-value`)
significant_effects %>%
kable(caption = "Significant Effects (p < 0.05)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
# Effect interpretation
cat("### Effect Interpretations:\n\n")
if (abs(A_effect) > 0.1) {
cat("**Rotor Length (A):**",
ifelse(A_effect > 0, "Longer rotors increase", "Longer rotors decrease"),
"flight time by", round(abs(A_effect), 3), "seconds on average.\n")
}
if (abs(B_effect) > 0.1) {
cat("**Rotor Width (B):**",
ifelse(B_effect > 0, "Wider rotors increase", "Wider rotors decrease"),
"flight time by", round(abs(B_effect), 3), "seconds on average.\n")
}
if (abs(C_effect) > 0.1) {
cat("**Paper Clip (C):**",
ifelse(C_effect > 0, "Adding a paper clip increases", "Adding a paper clip decreases"),
"flight time by", round(abs(C_effect), 3), "seconds on average.\n")
}
# Find optimal settings for maximum and minimum flight time
optimal_max <- treatment_means %>%
filter(mean_response == max(mean_response))
optimal_min <- treatment_means %>%
filter(mean_response == min(mean_response))
cat("### Optimal Settings:\n\n")
cat("**For MAXIMUM flight time:**\n")
cat("- Treatment combination:", optimal_max$Treatment, "\n")
cat("- Rotor Length:", ifelse(optimal_max$A_Length == 1, "8.5 cm (Long)", "7.5 cm (Short)"), "\n")
cat("- Rotor Width:", ifelse(optimal_max$B_Width == 1, "5.0 cm (Wide)", "3.5 cm (Narrow)"), "\n")
cat("- Paper Clip:", ifelse(optimal_max$C_Clip == 1, "2 clips", "0 clips"), "\n")
cat("- Average flight time:", round(optimal_max$mean_response, 3), "seconds\n\n")
cat("**For MINIMUM flight time:**\n")
cat("- Treatment combination:", optimal_min$Treatment, "\n")
cat("- Rotor Length:", ifelse(optimal_min$A_Length == 1, "8.5 cm (Long)", "7.5 cm (Short)"), "\n")
cat("- Rotor Width:", ifelse(optimal_min$B_Width == 1, "5.0 cm (Wide)", "3.5 cm (Narrow)"), "\n")
cat("- Paper Clip:", ifelse(optimal_min$C_Clip == 1, "2 clips", "0 clips"), "\n")
cat("- Average flight time:", round(optimal_min$mean_response, 3), "seconds\n")
# Create reduced model with only significant terms (if any)
significant_terms <- anova_tidy %>%
filter(!is.na(`p-value`), `p-value` < 0.05, Source != "Error") %>%
pull(Source)
if (length(significant_terms) > 0) {
cat("### Reduced Model with Significant Terms Only:\n")
# Build model formula for significant terms
formula_terms <- character()
if ("A: Rotor Length" %in% significant_terms) formula_terms <- c(formula_terms, "A_Length")
if ("B: Rotor Width" %in% significant_terms) formula_terms <- c(formula_terms, "B_Width")
if ("C: Paper Clip" %in% significant_terms) formula_terms <- c(formula_terms, "C_Clip")
if ("AB: Length × Width" %in% significant_terms) formula_terms <- c(formula_terms, "A_Length:B_Width")
if ("AC: Length × Clip" %in% significant_terms) formula_terms <- c(formula_terms, "A_Length:C_Clip")
if ("BC: Width × Clip" %in% significant_terms) formula_terms <- c(formula_terms, "B_Width:C_Clip")
if ("ABC: Length × Width × Clip" %in% significant_terms) formula_terms <- c(formula_terms, "A_Length:B_Width:C_Clip")
if (length(formula_terms) > 0) {
formula_string <- paste("Time_s ~", paste(formula_terms, collapse = " + "))
model_reduced <- lm(as.formula(formula_string), data = helicopter_coded)
cat("**Reduced Model:**\n")
print(summary(model_reduced))
# Model comparison
cat("\n**Model Comparison:**\n")
comparison <- anova(model_reduced, model_full)
print(comparison)
}
} else {
cat("### No statistically significant effects found at α = 0.05 level.\n")
cat("Consider using the grand mean as the best predictor.\n")
cat("Grand mean flight time:", round(mean(helicopter_coded$Time_s), 3), "seconds\n")
}
